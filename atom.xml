<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[周之锐的博客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-01-17T07:34:47.966Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[MeepoZhou]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[数据存储]]></title>
    <link href="http://yoursite.com/2016/01/17/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2016/01/17/数据存储/</id>
    <published>2016-01-17T07:08:38.000Z</published>
    <updated>2016-01-17T07:34:47.966Z</updated>
    <content type="html"><![CDATA[<p><strong>1. 文件存储</strong></p>
<p>(1）将数据存储到文件中<br>&emsp;&emsp;Context类提供了openFileOutput()方法，第一个参数是文件名（不可以包括路径，所有文件默认保存到/data/data/<package name="">/files/），第二个参数是文件的操作模式，MODE_PRIVATE是默认模式，覆盖文件的内容，MODE_APPEND是在文件中追加内容。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// @param name The name of the file to open; can not contain path</span><br><span class="line">//             separators.</span><br><span class="line">// @param mode Operating mode.  <span class="operator"><span class="keyword">Use</span> <span class="number">0</span> <span class="keyword">or</span> &#123;@<span class="keyword">link</span> #MODE_PRIVATE&#125; <span class="keyword">for</span> the</span><br><span class="line">// <span class="keyword">default</span> operation, &#123;@<span class="keyword">link</span> #MODE_APPEND&#125; <span class="keyword">to</span> append <span class="keyword">to</span> an existing <span class="keyword">file</span>,</span><br><span class="line">// &#123;@<span class="keyword">link</span> #MODE_WORLD_READABLE&#125; <span class="keyword">and</span> &#123;@<span class="keyword">link</span> #MODE_WORLD_WRITEABLE&#125; <span class="keyword">to</span> control</span><br><span class="line">// permissions.</span><br><span class="line">//</span><br><span class="line">// @<span class="keyword">return</span> The resulting &#123;@<span class="keyword">link</span> FileOutputStream&#125;.</span><br><span class="line"><span class="keyword">public</span> abstract FileOutputStream openFileOutput(<span class="keyword">String</span> <span class="keyword">name</span>, <span class="built_in">int</span> <span class="keyword">mode</span>)</span><br><span class="line">   	throws FileNotFoundException;</span></span><br></pre></td></tr></table></figure></package></p>
<p>&emsp;&emsp;该方法返回FileOutputStream对象，用于构建一个OutputStreamWriter，用于将字符流转化为字节流，拥有8K的内存空间用于转化。<br><a id="more"></a><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">private</span> <span class="keyword">ByteBuffer </span><span class="keyword">bytes </span>= <span class="keyword">ByteBuffer.allocate(8192);</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;再使用BufferWriter将文本内容写入到文件中。该对象具有8K的大小的缓冲器，以减少发送过程的开支。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedWriter</span>(<span class="params">Writer <span class="keyword">out</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">out</span>, <span class="number">8192</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;使用write方法进行发送：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">write</span>(<span class="keyword">char</span>[] buffer, <span class="keyword">int</span> offset, <span class="keyword">int</span> <span class="keyword">count</span>) <span class="keyword">throws</span> IOException</span><br></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(<span class="params"></span>) throws IOException </span>&#123;</span><br><span class="line">    String data = <span class="string">"Data to save"</span>;</span><br><span class="line">    FileOutputStream <span class="keyword">out</span> = <span class="keyword">null</span>;</span><br><span class="line">    BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">out</span> = openFileOutput(<span class="string">"data"</span>, Context.MODE_PRIVATE);</span><br><span class="line">        writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">out</span>));</span><br><span class="line">        writer.write(data);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（2）从文件中读取数据<br>&emsp;&emsp;Context类中提供了openFileInput方法，用于从文件中读取数据，只有一个参数-文件名，系统将在/data/data/<package name="">/files/文件中寻找同名文件，返回FileInputStream对象。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">FileInputStream <span class="title">openFileInput</span><span class="params">(String name)</span></span><br><span class="line">    <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> mBase.<span class="title">openFileInput</span><span class="params">(name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></package></p>
<p>&emsp;&emsp;借助FileInputStream对象构建一个InputStreamReader对象，再构建一个BufferReader对象，通过readline方法一行一行读取文件中的内容，存放到StringBuffer对象（当需要对字符串进行频繁操作的时候使用StringBuffer效率更好）中。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">String</span> load() &#123;</span><br><span class="line">    FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">BufferedReader</span> reader = <span class="keyword">null</span>;</span><br><span class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        in = openFileInput(<span class="string">"data"</span>);</span><br><span class="line">        reader = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">line</span>=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="built_in">line</span> = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            content.<span class="built_in">append</span>(<span class="built_in">line</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(reader != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意：对字符串进行非空判断的使用使用<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">if</span>(<span class="tag">TextUtils</span><span class="class">.isEmpty</span>(<span class="tag">Text</span>))<span class="rules">&#123;&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>它能够进行两种空值的判断吧，字符串为null和字符串长度为0<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isEmpty(@Nullable CharSequence <span class="keyword">str</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">str</span> == <span class="keyword">null</span> || <span class="keyword">str</span>.length() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>2. SharedPreferences存储</strong></p>
<p>&emsp;&emsp;SharedPreferences以键值对的方式进行存储。<br>&emsp;&emsp;获取SharedPreferences的三种方式：</p>
<p>&emsp;&emsp;1. Context类的getSharedPreferences()方法，第一个参数是文件名，第二个参数是操作模式。MODE_PRIVATE是默认模式，与传0效果相同，只允许当前应用程序进行读写操作，MODE_MULTI_PROCESS用于多个进程都需要对其进行操作的情况。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">SharedPreferences <span class="title">getSharedPreferences</span><span class="params">(String name, <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> mBase.<span class="title">getSharedPreferences</span><span class="params">(name, mode)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;2. Activity类中的getPreferences()方法，只接受模式参数，名称使用当前活动的类名。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function">SharedPreferences <span class="title">getPreferences</span><span class="params">(<span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getSharedPreferences(getLocalClassName(), mode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;3.PreferenceManager类中的getDaufltSharedPreferences()方法，只接受Context参数，自动使用包名为前缀进行命名。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">SharedPreferences <span class="title">getDefaultSharedPreferences</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> context.getSharedPreferences(getDefaultSharedPreferencesName(context),</span><br><span class="line">            getDefaultSharedPreferencesMode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>存储的三个步骤：</p>
<ul>
<li>调用SharedPreferences对象的edit方法，获取一个Edit对象 ；</li>
<li>使用putBoolean、putString等方法向Edit对象中添加数据；</li>
<li>使用commit()方法进行提交，完成数据存储操作。<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences.Editor <span class="keyword">editor</span> = getSharedPreferences(<span class="string">"data"</span>,MODE_PRIVATE).edit();</span><br><span class="line"><span class="keyword">editor</span>.putString(<span class="string">"name"</span>,<span class="string">"zzr"</span>);</span><br><span class="line"><span class="keyword">editor</span>.commit();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>读取数据：<br>&emsp;&emsp;步骤与存储类似，方法换做getBoolean，getString等。</p>
<p><strong>3. SQLite数据库存储</strong></p>
<p>//TODO 数据库部分  </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>1. 文件存储</strong></p>
<p>(1）将数据存储到文件中<br>&emsp;&emsp;Context类提供了openFileOutput()方法，第一个参数是文件名（不可以包括路径，所有文件默认保存到/data/data/<package name>/files/），第二个参数是文件的操作模式，MODE_PRIVATE是默认模式，覆盖文件的内容，MODE_APPEND是在文件中追加内容。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// @param name The name of the file to open; can not contain path</span><br><span class="line">//             separators.</span><br><span class="line">// @param mode Operating mode.  <span class="operator"><span class="keyword">Use</span> <span class="number">0</span> <span class="keyword">or</span> &#123;@<span class="keyword">link</span> #MODE_PRIVATE&#125; <span class="keyword">for</span> the</span><br><span class="line">// <span class="keyword">default</span> operation, &#123;@<span class="keyword">link</span> #MODE_APPEND&#125; <span class="keyword">to</span> append <span class="keyword">to</span> an existing <span class="keyword">file</span>,</span><br><span class="line">// &#123;@<span class="keyword">link</span> #MODE_WORLD_READABLE&#125; <span class="keyword">and</span> &#123;@<span class="keyword">link</span> #MODE_WORLD_WRITEABLE&#125; <span class="keyword">to</span> control</span><br><span class="line">// permissions.</span><br><span class="line">//</span><br><span class="line">// @<span class="keyword">return</span> The resulting &#123;@<span class="keyword">link</span> FileOutputStream&#125;.</span><br><span class="line"><span class="keyword">public</span> abstract FileOutputStream openFileOutput(<span class="keyword">String</span> <span class="keyword">name</span>, <span class="built_in">int</span> <span class="keyword">mode</span>)</span><br><span class="line">   	throws FileNotFoundException;</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;该方法返回FileOutputStream对象，用于构建一个OutputStreamWriter，用于将字符流转化为字节流，拥有8K的内存空间用于转化。<br>]]>
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015年度总结]]></title>
    <link href="http://yoursite.com/2015/12/16/2015%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2015/12/16/2015年度总结/</id>
    <published>2015-12-16T02:35:14.000Z</published>
    <updated>2016-01-17T07:35:44.575Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;虽说以一篇年度总结为博客开个头不太好，但万事开头难，以后还会继续更新的。<br>&emsp;&emsp;至于开这个博客，起源于知乎上介绍费曼技巧（要不是我对费恩曼感兴趣，我也不会点进去）的回答，从中了解到学习留存率的问题，我觉得还是挺有道理的。<br>  <div align="center"><br><img src="http://www.edu24ol.com/web_news/images/2014-7/2014723163359608.gif" width="400" alt="费曼技巧" title="费曼技巧" align="center"><p>费曼技巧</p><br>  </div><br>&emsp;&emsp;图说教授他人可以更好的留存学到的知识，所以特开此博客，留待后续更新开发经验(以踩坑经验为主)及学到的东西。<br><a id="more"></a><br>&emsp;&emsp;今年首先是确定了科研方向和工作方向，不得不说在开始做Android上层开发之前，跟的项目真是各种乱，不同需求关联不大且浅尝辄止，感觉并没有学到什么东西。不过有了确定的目标之后，方向还是非常明确的，清楚的知道自己该做什么欠缺什么，虽说Android开发只做了半年，自我感觉提升还是很大的。科研上我只想说，放弃百度使用Google，虽说百度在一些中国化的方面做得还是相当不错的，比如直接将查快递、天气、火车票预售时间等放到搜索页面，但这对于科研来说并没有什么卵用。同时感觉国内的论坛氛围与国外还是差了许多。这时候就不得不说一说<a href="http://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a>了，上面的人回答问题专业且严谨，绝无复制粘贴敷衍了事，更多的是自己验证之后切实可行，才会把经验进行分享，对于我等初学者帮助很大，不过目前我也只能围观下，希望以后能以帮助别人的角色参与其中。<br>&emsp;&emsp;<a href="https://github.com/" target="_blank" rel="external">GitHub</a>在国外算是大名鼎鼎了，最初对其了解来自于<a href="http://www.tuicool.com/articles/2yEBzqM" target="_blank" rel="external">GitHub上史上最全的Android开源项目分类汇总</a>,如同发现了新大陆一样，同时它还能进行版本控制，虽说用得还不够熟练，不过一定会越来越好。<br>&emsp;&emsp;既然今年研二，就也不得不面临找工作这个问题。老实说，找工作之前听各个师兄师姐介绍经验的时候，还是挺紧张的，毕竟没有经历过。不过找工作的过程倒是出奇的顺利，面试的第一家公司(腾讯)给了Offer，同时面试第一天也收到了口头Offer(中兴)，直接导致漫长的找工作季提前结束了，还面了百度积攒面试经验，之后安逸的在家呆了半个月陪家人，挺好。<br>&emsp;&emsp;从11月开始，每天晚上成为了学习和看书的自由时间，按照自己的兴趣以及工作需要，收获还是挺大的。沉下心来看看书，不是刻意的去学什么，纯粹为了满足个人好奇心，同时适当放松。btw睡前看书睡得香。<br>  <div align="center"><br><img src="http://7xp9p5.com1.z0.glb.clouddn.com/Screenshot_2015-12-17-10-21-35.jpg?imageView2/2/w/700" alt="多看阅历" title="多看阅历" align="center"><p>多看阅历</p><br>  </div><br>&emsp;&emsp;不知不觉中，喜欢在知乎遨游，各种脑洞大开的问题以及神回复让我发现，原来世界上逗比还有很多啊，哈哈。不过知乎的特点也很鲜明，借用一个人的回答，”在知乎没人笑我太认真” 。诚然，在知乎上专业向和非专业向的不少回答引经据典并附上参考文献，简直比我本科毕设做的还认真。另外知乎上的大神普遍都很友好，总是很认真的回复我的私信，给你们点个赞！<br>&emsp;&emsp;另外由于工作需要，英文名暂定为MeepoZhou，如果有什么有意思的英文名可以推荐给我。 2333<br>&emsp;&emsp;回顾这一年，我做了许多改变，可能原因有以下几点：</p>
<ul>
<li>即将步入社会的危机感，毕竟学校和社会区别很大，适应学校生活容易，适应社会却很难；</li>
<li>出于对未来的长远规划，从现在开始作出改变十分有必要。至于规划内容在此不表；</li>
<li>对于过往一成不变的厌倦，自从毕业旅行结束之后，生活也就平静了下来，每天呆在实验室做做项目简直平淡的过分，不过就算在实验室也应该能体验到更大的世界，您说是不是。</li>
</ul>
<p><strong>最后，感谢所有帮助我、支持我的人(各位请自觉对号入座)！</strong></p>
<h1 id="u52A0_u6CB9_uFF0C2016_uFF01_uFF01_uFF01"><a href="#u52A0_u6CB9_uFF0C2016_uFF01_uFF01_uFF01" class="headerlink" title="加油，2016！！！"></a>加油，2016！！！</h1>]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;虽说以一篇年度总结为博客开个头不太好，但万事开头难，以后还会继续更新的。<br>&emsp;&emsp;至于开这个博客，起源于知乎上介绍费曼技巧（要不是我对费恩曼感兴趣，我也不会点进去）的回答，从中了解到学习留存率的问题，我觉得还是挺有道理的。<br>  <div  align="center"><br><img src="http://www.edu24ol.com/web_news/images/2014-7/2014723163359608.gif" width ="400"  alt="费曼技巧" title="费曼技巧" align=center /><p>费曼技巧</p><br>  </div><br>&emsp;&emsp;图说教授他人可以更好的留存学到的知识，所以特开此博客，留待后续更新开发经验(以踩坑经验为主)及学到的东西。<br>]]>
    
    </summary>
    
      <category term="年度总结" scheme="http://yoursite.com/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
